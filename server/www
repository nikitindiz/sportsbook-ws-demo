#!/usr/bin/env node
import * as WebSocket from "ws";
import http from "http";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { MatchesTable } from "./MatchesTable.js";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const PORT = process.env.PORT || 3000;

// Create HTTP server for static content
const server = http.createServer((req, res) => {
  // Serve index.html for the root path
  if (req.url === "/" || req.url === "/index.html") {
    fs.readFile(path.join(__dirname, "../public/index.html"), (err, data) => {
      if (err) {
        res.writeHead(500, { "Content-Type": "text/plain" });
        res.end("500 Internal Server Error");
        return;
      }
      res.writeHead(200, { "Content-Type": "text/html" });
      res.end(data);
    });
    return;
  }

  // Serve files from public directory
  const filePath = path.join(__dirname, "../public", req.url);
  fs.readFile(filePath, (err, data) => {
    if (err) {
      res.writeHead(404, { "Content-Type": "text/plain" });
      res.end("404 Not Found");
      return;
    }

    const ext = path.extname(filePath);
    let contentType = "text/plain";
    if (ext === ".html") contentType = "text/html";
    if (ext === ".css") contentType = "text/css";
    if (ext === ".js") contentType = "application/javascript";

    res.writeHead(200, { "Content-Type": contentType });
    res.end(data);
  });
});

// Create WebSocket server
const wss = new WebSocket.WebSocketServer({
  server,
});

// Broadcast function to send updates to all connected clients
function broadcastMatchUpdates(data) {
  const message = JSON.stringify({
    type: "match_update",
    data: data,
    timestamp: new Date().toISOString(),
  });

  wss.clients.forEach((client) => {
    if (client.readyState === 1) {
      client.send(message);
    }
  });
  console.log(`Broadcasted match updates to ${wss.clients.size} clients`);
}

const table = new MatchesTable(10000, 5000);

table.onInitialize((initialMatches) => {
  broadcastMatchUpdates(initialMatches);
});

table.onUpdate((updatedMatches) => {
  broadcastMatchUpdates(updatedMatches);
});

// Handler for new connections
wss.on("connection", async (ws, request) => {
  console.log("New WebSocket connection from:", request.socket.remoteAddress);

  // Send welcome message with current matches
  try {
    ws.send(
      JSON.stringify({
        type: "initial_matches",
        data: table.matchesData,
        timestamp: new Date().toISOString(),
      })
    );
    console.log(`Sent ${table.matchesData.length} matches to new client`);
  } catch (error) {
    console.error("Error sending initial matches to client:", error);
  }

  // Handler for connection close
  ws.on("close", (code, reason) => {
    console.log("Connection closed:", code, reason.toString());
  });

  // Error handler
  ws.on("error", (error) => {
    console.error("WebSocket error:", error);
  });

  // Ping every 30 seconds to keep connection alive
  const pingInterval = setInterval(() => {
    if (ws.readyState === WebSocket.OPEN) {
      ws.ping();
    } else {
      clearInterval(pingInterval);
    }
  }, 100);

  ws.on("pong", () => {
    console.log("Received pong from client");
  });
});

// Server error handler
wss.on("error", (error) => {
  console.error("WebSocket Server error:", error);
});

server.listen(PORT, () => {
  console.log(`Running on port ${PORT}`);
  console.log(`WebSocket clients connected: ${wss.clients.size}`);

  // Start the matches manager when the server starts
  console.log("Matches manager started with the server");
});

// Handle server shutdown
process.on("SIGINT", () => {
  console.log("Shutting down server...");
  matchesManager.stop();
  process.exit(0);
});
